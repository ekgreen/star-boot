# 🔍 PR Checks - Проверки кода при создании Pull Request и пуше в основные ветки
# Выполняется компиляция, валидация (checkstyle), тесты и покрытие
# Срабатывает на PR в основные ветки И на прямой пуш в эти ветки
name: Build

on:
  # PR в основные ветки
  pull_request:
    branches:
      - main
      - master
      - develop
      - 'dev/**'
      - 'release/**'

  # Прямой пуш в основные ветки
  push:
    branches:
      - main
      - master
      - develop
      - 'dev/**'
      - 'release/**'

jobs:
  # 📋 Информация о событии
  event-info:
    runs-on: ubuntu-latest
    outputs:
      event-type: ${{ steps.info.outputs.event-type }}
      target-branch: ${{ steps.info.outputs.target-branch }}
      source-branch: ${{ steps.info.outputs.source-branch }}

    steps:
      - name: Event Information
        id: info
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "event-type=pull_request" >> $GITHUB_OUTPUT
            echo "target-branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
            echo "source-branch=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "Event: Pull Request"
            echo "Target branch: ${{ github.base_ref }}"
            echo "Source branch: ${{ github.head_ref }}"
            echo "PR number: ${{ github.event.number }}"
          else
            echo "event-type=push" >> $GITHUB_OUTPUT
            echo "target-branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "source-branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "Event: Direct Push"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
          fi

  # ⚡ Быстрые проверки - компиляция с валидацией (checkstyle выполняется в фазе validate)
  quick-checks:
    runs-on: ubuntu-latest
    needs: event-info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven

      # 🏗️ Компиляция проекта с профилем (checkstyle автоматически выполняется в фазе validate)
      - name: Compile with validation
        run: |
          echo "::group::📦 Compiling project with validation (includes Checkstyle)"
          mvn clean compile -P prod-like-track -B
          echo "::endgroup::"
        # Компиляция с профилем prod-like-track автоматически включает checkstyle в фазе validate

      # 📊 Сохранение результатов checkstyle (если есть ошибки)
      - name: Upload Checkstyle results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-results
          path: '**/target/checkstyle-result.xml'
          if-no-files-found: ignore

  # 🧪 Тесты и покрытие
  tests-and-coverage:
    runs-on: ubuntu-latest
    needs: [event-info, quick-checks]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 24
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'temurin'
          cache: maven

      # 🧪 Запуск тестов с покрытием (агрегация происходит автоматически в фазе verify)
      - name: Run tests with coverage
        run: |
          echo "::group::🧪 Running tests with JaCoCo coverage (aggregation included)"
          mvn clean verify -P prod-like-track -B \
            -Djacoco.halt.on.failure=false
          echo "::endgroup::"
        # verify фаза с профилем prod-like-track уже включает jacoco:report-aggregate

      # 📋 Отчет о тестах публикуется в виде комментариев и аннотаций к PR/коммиту
      - name: Publish Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Maven Tests Report
          token: ${{ secrets.GITHUB_TOKEN }}
          path: '**/target/surefire-reports/*.xml,**/target/failsafe-reports/*.xml'
          reporter: java-junit
          fail-on-error: false


      # 📈 Отправка покрытия в Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./target/site/jacoco-aggregate/jacoco.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true

      # 💬 Комментарий с покрытием (только для PR)
      - name: JaCoCo Code Coverage Report
        if: needs.event-info.outputs.event-type == 'pull_request'
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ./target/site/jacoco-aggregate/jacoco.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 80
          min-coverage-changed-files: 75
          title: 📊 Code Coverage Report
          update-comment: true
          # Дополнительные настройки отчета
          pass-emoji: '✅'
          fail-emoji: '❌'

      # 🗂️ Сохранение артефактов
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            **/target/surefire-reports/**/*
            **/target/failsafe-reports/**/*
            **/target/site/jacoco/**/*
            **/target/site/jacoco-aggregate/**/*
            **/target/allure-report-unit/**/*
          if-no-files-found: ignore

  # 🏁 Итоговый статус проверки
  final-status:
    runs-on: ubuntu-latest
    needs: [event-info, quick-checks, tests-and-coverage]
    if: always()

    steps:
      - name: Final Check Status
        run: |
          echo "::group::🏁 Final Status Summary"

          EVENT_TYPE="${{ needs.event-info.outputs.event-type }}"
          QUICK_STATUS="${{ needs.quick-checks.result }}"
          TEST_STATUS="${{ needs.tests-and-coverage.result }}"

          echo "📋 Check Summary:"
          echo "  Event type: $EVENT_TYPE"
          echo "  ⚡ Quick checks: $QUICK_STATUS"
          echo "  🧪 Tests & coverage: $TEST_STATUS"

          if [[ "$QUICK_STATUS" == "success" && "$TEST_STATUS" == "success" ]]; then
            echo ""
            echo "✅ All checks passed successfully!"
            if [[ "$EVENT_TYPE" == "pull_request" ]]; then
              echo "PR is ready for review and merge."
            else
              echo "Push validation completed successfully."
            fi
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo ""
            echo "❌ Some checks failed"
            if [[ "$EVENT_TYPE" == "pull_request" ]]; then
              echo "PR requires fixes before merge."
            else
              echo "Push validation failed - please check the issues."
            fi
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "::endgroup::"

      # 📊 Summary для GitHub
      - name: Job Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🔍 Code Quality Check Results

          | Check | Status |
          |-------|--------|
          | ⚡ Quick Checks (Compile + Checkstyle) | ${{ needs.quick-checks.result == 'success' && '✅ Passed' || '❌ Failed' }} |
          | 🧪 Tests & Coverage | ${{ needs.tests-and-coverage.result == 'success' && '✅ Passed' || '❌ Failed' }} |

          ### 📋 Event Details
          - **Type**: ${{ needs.event-info.outputs.event-type }}
          - **Branch**: ${{ needs.event-info.outputs.target-branch }}
          - **Commit**: `${{ github.sha }}`

          ### 📊 Coverage Thresholds
          - **Overall coverage**: 80%
          - **Changed files coverage**: 75%
          EOF

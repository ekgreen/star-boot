package com.github.old.dog.star.boot.data.access.api;

import com.github.old.dog.star.boot.interfaces.Sequence;
import java.util.Map;

/**
 * The SequenceFactory interface defines a contract for managing and retrieving
 * sequences associated with specific identifier types, where sequences are used to
 * generate unique identifiers typically tied to database operations.
 * <p>
 * This interface provides methods to fetch sequences either collectively for a type
 * or individually by a combination of type and sequence key.
 */
public interface SequenceFactory {

    /**
     * Retrieves a map of sequences for a specified identifier type.
     * Each entry in the map associates a sequence key (as a string) with
     * a {@link Sequence} that can generate unique identifiers of the given type.
     *
     * @param <ID>   the type of the identifiers generated by the sequences
     * @param idType the {@code Class} object representing the type of the identifiers
     * @return a map where the keys are sequence keys (as strings) and the values are
     *         {@link Sequence} instances generating unique identifiers of the specified type
     */
    <ID> Map<String, Sequence<ID>> getSequencesForType(Class<ID> idType);

    /**
     * Retrieves a specific {@link Sequence} for a given identifier type and sequence key.
     * The method uses the provided identifier type to fetch a map of sequences and then
     * retrieves the sequence corresponding to the provided key.
     *
     * @param <ID>        the type of the identifiers generated by the sequence
     * @param idType      the {@code Class} object representing the type of the identifiers
     * @param sequenceKey the key used to retrieve the specific sequence from the map
     * @return the {@link Sequence} associated with the provided type and key, or {@code null}
     *         if no sequence exists for the given type and key
     */
    default <ID> Sequence<ID> getSequenceForTypeAndKey(Class<ID> idType, String sequenceKey) {
        return getSequencesForType(idType).get(sequenceKey);
    }
}

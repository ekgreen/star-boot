/*
 * This file is generated by jOOQ.
 */
package com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.AbstractSpringDAOImpl;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.CreditObjectTable;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.pojos.CreditObjectPojo;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.records.CreditObjectRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CrudCreditObjectRepository extends AbstractSpringDAOImpl<CreditObjectRecord, CreditObjectPojo, Long> {

    /**
     * Create a new CrudCreditObjectRepository without any configuration
     */
    public CrudCreditObjectRepository() {
        super(CreditObjectTable.CREDIT_OBJECT, CreditObjectPojo.class);
    }

    /**
     * Create a new CrudCreditObjectRepository with an attached configuration
     */
    @Autowired
    public CrudCreditObjectRepository(Configuration configuration) {
        super(CreditObjectTable.CREDIT_OBJECT, CreditObjectPojo.class, configuration);
    }

    @Override
    public Long getId(CreditObjectPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<CreditObjectPojo> fetchById(Long... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public CreditObjectPojo fetchOneById(Long value) {
        return fetchOne(CreditObjectTable.CREDIT_OBJECT.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<CreditObjectPojo> fetchOptionalById(Long value) {
        return fetchOptional(CreditObjectTable.CREDIT_OBJECT.ID, value);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByCode(String... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.CODE, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByName(String... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.NAME, values);
    }

    /**
     * Fetch records that have <code>isin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfIsin(String lowerInclusive, String upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.ISIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>isin IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByIsin(String... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.ISIN, values);
    }

    /**
     * Fetch records that have <code>sector_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfSectorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.SECTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sector_id IN (values)</code>
     */
    public List<CreditObjectPojo> fetchBySectorId(Integer... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.SECTOR_ID, values);
    }

    /**
     * Fetch records that have <code>parent_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfParentId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.PARENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parent_id IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByParentId(Long... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.PARENT_ID, values);
    }

    /**
     * Fetch records that have <code>is_deleted BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfIsDeleted(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.IS_DELETED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_deleted IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByIsDeleted(Integer... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.IS_DELETED, values);
    }

    /**
     * Fetch records that have <code>creation_timestamp BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfCreationTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.CREATION_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creation_timestamp IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByCreationTimestamp(LocalDateTime... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.CREATION_TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>modification_timestamp BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<CreditObjectPojo> fetchRangeOfModificationTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(CreditObjectTable.CREDIT_OBJECT.MODIFICATION_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modification_timestamp IN (values)</code>
     */
    public List<CreditObjectPojo> fetchByModificationTimestamp(LocalDateTime... values) {
        return fetch(CreditObjectTable.CREDIT_OBJECT.MODIFICATION_TIMESTAMP, values);
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Indexes;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Keys;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Ratings;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.records.CreditObjectRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CreditObjectTable extends TableImpl<CreditObjectRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ratings.credit_object</code>
     */
    public static final CreditObjectTable CREDIT_OBJECT = new CreditObjectTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CreditObjectRecord> getRecordType() {
        return CreditObjectRecord.class;
    }

    /**
     * The column <code>ratings.credit_object.id</code>. Уникальный числовой
     * идентификатор объекта под наблюдением кредитного агентства в регистре
     */
    public final TableField<CreditObjectRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Уникальный числовой идентификатор объекта под наблюдением кредитного агентства в регистре");

    /**
     * The column <code>ratings.credit_object.code</code>. Универсальный
     * буквенный код (кодированное название, очищенное от лишних символов, в
     * kebab-case)
     */
    public final TableField<CreditObjectRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(128).nullable(false), this, "Универсальный буквенный код (кодированное название, очищенное от лишних символов, в kebab-case)");

    /**
     * The column <code>ratings.credit_object.name</code>. Буквенное название,
     * приведенное к общему формату
     */
    public final TableField<CreditObjectRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(256).nullable(false), this, "Буквенное название, приведенное к общему формату");

    /**
     * The column <code>ratings.credit_object.isin</code>. ISIN предназначен для
     * стандартизации и упрощения идентификации ценных бумаг на мировом рынке
     */
    public final TableField<CreditObjectRecord, String> ISIN = createField(DSL.name("isin"), SQLDataType.VARCHAR(32), this, "ISIN предназначен для стандартизации и упрощения идентификации ценных бумаг на мировом рынке");

    /**
     * The column <code>ratings.credit_object.sector_id</code>. Сектор бизнеса
     * или экономики к которому относится объект наблюдения
     */
    public final TableField<CreditObjectRecord, Integer> SECTOR_ID = createField(DSL.name("sector_id"), SQLDataType.INTEGER.nullable(false), this, "Сектор бизнеса или экономики к которому относится объект наблюдения");

    /**
     * The column <code>ratings.credit_object.parent_id</code>. Родственная
     * связь между дочерними и родительскими объектами, например между ценной
     * бумагой и организацией выпускающей ее
     */
    public final TableField<CreditObjectRecord, Long> PARENT_ID = createField(DSL.name("parent_id"), SQLDataType.BIGINT, this, "Родственная связь между дочерними и родительскими объектами, например между ценной бумагой и организацией выпускающей ее");

    /**
     * The column <code>ratings.credit_object.is_deleted</code>. Объект
     * присутствует или отсутствует в последней выгрузке
     */
    public final TableField<CreditObjectRecord, Integer> IS_DELETED = createField(DSL.name("is_deleted"), SQLDataType.INTEGER.nullable(false), this, "Объект присутствует или отсутствует в последней выгрузке");

    /**
     * The column <code>ratings.credit_object.creation_timestamp</code>. Время
     * вставки записи
     */
    public final TableField<CreditObjectRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время вставки записи");

    /**
     * The column <code>ratings.credit_object.modification_timestamp</code>.
     * Время изменения записи
     */
    public final TableField<CreditObjectRecord, LocalDateTime> MODIFICATION_TIMESTAMP = createField(DSL.name("modification_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Время изменения записи");

    private CreditObjectTable(Name alias, Table<CreditObjectRecord> aliased) {
        this(alias, aliased, null);
    }

    private CreditObjectTable(Name alias, Table<CreditObjectRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ratings.credit_object</code> table reference
     */
    public CreditObjectTable(String alias) {
        this(DSL.name(alias), CREDIT_OBJECT);
    }

    /**
     * Create an aliased <code>ratings.credit_object</code> table reference
     */
    public CreditObjectTable(Name alias) {
        this(alias, CREDIT_OBJECT);
    }

    /**
     * Create a <code>ratings.credit_object</code> table reference
     */
    public CreditObjectTable() {
        this(DSL.name("credit_object"), null);
    }

    public <O extends Record> CreditObjectTable(Table<O> child, ForeignKey<O, CreditObjectRecord> key) {
        super(child, key, CREDIT_OBJECT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ratings.RATINGS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX__RATINGS_CREDIT_OBJECT__CODE, Indexes.IDX__RATINGS_CREDIT_OBJECT__ID);
    }

    @Override
    public UniqueKey<CreditObjectRecord> getPrimaryKey() {
        return Keys.CREDIT_OBJECT_PKEY;
    }

    @Override
    public CreditObjectTable as(String alias) {
        return new CreditObjectTable(DSL.name(alias), this);
    }

    @Override
    public CreditObjectTable as(Name alias) {
        return new CreditObjectTable(alias, this);
    }

    @Override
    public CreditObjectTable as(Table<?> alias) {
        return new CreditObjectTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CreditObjectTable rename(String name) {
        return new CreditObjectTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CreditObjectTable rename(Name name) {
        return new CreditObjectTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CreditObjectTable rename(Table<?> name) {
        return new CreditObjectTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, String, String, String, Integer, Long, Integer, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super String, ? super String, ? super String, ? super Integer, ? super Long, ? super Integer, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

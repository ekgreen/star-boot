/*
 * This file is generated by jOOQ.
 */
package com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.AbstractSpringDAOImpl;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.RatingHistoryTable;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.pojos.RatingHistoryPojo;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.records.RatingHistoryRecord;
import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * История изменений кредитных рейтингов объектов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CrudRatingHistoryRepository extends AbstractSpringDAOImpl<RatingHistoryRecord, RatingHistoryPojo, Long> {

    /**
     * Create a new CrudRatingHistoryRepository without any configuration
     */
    public CrudRatingHistoryRepository() {
        super(RatingHistoryTable.RATING_HISTORY, RatingHistoryPojo.class);
    }

    /**
     * Create a new CrudRatingHistoryRepository with an attached configuration
     */
    @Autowired
    public CrudRatingHistoryRepository(Configuration configuration) {
        super(RatingHistoryTable.RATING_HISTORY, RatingHistoryPojo.class, configuration);
    }

    @Override
    public Long getId(RatingHistoryPojo object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchById(Long... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public RatingHistoryPojo fetchOneById(Long value) {
        return fetchOne(RatingHistoryTable.RATING_HISTORY.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<RatingHistoryPojo> fetchOptionalById(Long value) {
        return fetchOptional(RatingHistoryTable.RATING_HISTORY.ID, value);
    }

    /**
     * Fetch records that have <code>credit_object_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreditObjectId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREDIT_OBJECT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>credit_object_id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreditObjectId(Long... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREDIT_OBJECT_ID, values);
    }

    /**
     * Fetch records that have <code>credit_agency_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreditAgencyId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREDIT_AGENCY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>credit_agency_id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreditAgencyId(Integer... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREDIT_AGENCY_ID, values);
    }

    /**
     * Fetch records that have <code>credit_rating_scale_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreditRatingScaleId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_SCALE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>credit_rating_scale_id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreditRatingScaleId(Integer... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_SCALE_ID, values);
    }

    /**
     * Fetch records that have <code>credit_rating_state_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreditRatingStateId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_STATE_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>credit_rating_state_id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreditRatingStateId(Integer... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_STATE_ID, values);
    }

    /**
     * Fetch records that have <code>credit_rating_outlook_id BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreditRatingOutlookId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_OUTLOOK_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>credit_rating_outlook_id IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreditRatingOutlookId(Integer... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREDIT_RATING_OUTLOOK_ID, values);
    }

    /**
     * Fetch records that have <code>creation_timestamp BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<RatingHistoryPojo> fetchRangeOfCreationTimestamp(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(RatingHistoryTable.RATING_HISTORY.CREATION_TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>creation_timestamp IN (values)</code>
     */
    public List<RatingHistoryPojo> fetchByCreationTimestamp(LocalDateTime... values) {
        return fetch(RatingHistoryTable.RATING_HISTORY.CREATION_TIMESTAMP, values);
    }
}

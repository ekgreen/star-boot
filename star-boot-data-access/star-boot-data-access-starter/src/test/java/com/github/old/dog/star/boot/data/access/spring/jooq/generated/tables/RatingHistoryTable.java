/*
 * This file is generated by jOOQ.
 */
package com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Indexes;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Keys;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.Ratings;
import com.github.old.dog.star.boot.data.access.spring.jooq.generated.tables.records.RatingHistoryRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

/**
 * История изменений кредитных рейтингов объектов
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RatingHistoryTable extends TableImpl<RatingHistoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ratings.rating_history</code>
     */
    public static final RatingHistoryTable RATING_HISTORY = new RatingHistoryTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RatingHistoryRecord> getRecordType() {
        return RatingHistoryRecord.class;
    }

    /**
     * The column <code>ratings.rating_history.id</code>. Уникальный
     * идентификатор сущности
     */
    public final TableField<RatingHistoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "Уникальный идентификатор сущности");

    /**
     * The column <code>ratings.rating_history.credit_object_id</code>.
     * Идентификатор кредитуемого объекта (ссылка на объект)
     */
    public final TableField<RatingHistoryRecord, Long> CREDIT_OBJECT_ID = createField(DSL.name("credit_object_id"), SQLDataType.BIGINT.nullable(false), this, "Идентификатор кредитуемого объекта (ссылка на объект)");

    /**
     * The column <code>ratings.rating_history.credit_agency_id</code>.
     * Идентификатор рейтингового агентства (ссылка на справочник агентств)
     */
    public final TableField<RatingHistoryRecord, Integer> CREDIT_AGENCY_ID = createField(DSL.name("credit_agency_id"), SQLDataType.INTEGER.nullable(false), this, "Идентификатор рейтингового агентства (ссылка на справочник агентств)");

    /**
     * The column <code>ratings.rating_history.credit_rating_scale_id</code>.
     * Идентификатор шкалы рейтинга (ссылка на справочник шкал)
     */
    public final TableField<RatingHistoryRecord, Integer> CREDIT_RATING_SCALE_ID = createField(DSL.name("credit_rating_scale_id"), SQLDataType.INTEGER.nullable(false), this, "Идентификатор шкалы рейтинга (ссылка на справочник шкал)");

    /**
     * The column <code>ratings.rating_history.credit_rating_state_id</code>.
     * Идентификатор состояния рейтинга (ссылка на справочник состояний)
     */
    public final TableField<RatingHistoryRecord, Integer> CREDIT_RATING_STATE_ID = createField(DSL.name("credit_rating_state_id"), SQLDataType.INTEGER.nullable(false), this, "Идентификатор состояния рейтинга (ссылка на справочник состояний)");

    /**
     * The column <code>ratings.rating_history.credit_rating_outlook_id</code>.
     */
    public final TableField<RatingHistoryRecord, Integer> CREDIT_RATING_OUTLOOK_ID = createField(DSL.name("credit_rating_outlook_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>ratings.rating_history.creation_timestamp</code>. Дата и
     * время фиксации изменения рейтинга
     */
    public final TableField<RatingHistoryRecord, LocalDateTime> CREATION_TIMESTAMP = createField(DSL.name("creation_timestamp"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "Дата и время фиксации изменения рейтинга");

    private RatingHistoryTable(Name alias, Table<RatingHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private RatingHistoryTable(Name alias, Table<RatingHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("История изменений кредитных рейтингов объектов"), TableOptions.table());
    }

    /**
     * Create an aliased <code>ratings.rating_history</code> table reference
     */
    public RatingHistoryTable(String alias) {
        this(DSL.name(alias), RATING_HISTORY);
    }

    /**
     * Create an aliased <code>ratings.rating_history</code> table reference
     */
    public RatingHistoryTable(Name alias) {
        this(alias, RATING_HISTORY);
    }

    /**
     * Create a <code>ratings.rating_history</code> table reference
     */
    public RatingHistoryTable() {
        this(DSL.name("rating_history"), null);
    }

    public <O extends Record> RatingHistoryTable(Table<O> child, ForeignKey<O, RatingHistoryRecord> key) {
        super(child, key, RATING_HISTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ratings.RATINGS;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX__RATINGS_CREDIT_RATING__ID_AGENCY_TIMESTAMP);
    }

    @Override
    public UniqueKey<RatingHistoryRecord> getPrimaryKey() {
        return Keys.RATING_HISTORY_PKEY;
    }

    @Override
    public RatingHistoryTable as(String alias) {
        return new RatingHistoryTable(DSL.name(alias), this);
    }

    @Override
    public RatingHistoryTable as(Name alias) {
        return new RatingHistoryTable(alias, this);
    }

    @Override
    public RatingHistoryTable as(Table<?> alias) {
        return new RatingHistoryTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RatingHistoryTable rename(String name) {
        return new RatingHistoryTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RatingHistoryTable rename(Name name) {
        return new RatingHistoryTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RatingHistoryTable rename(Table<?> name) {
        return new RatingHistoryTable(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Integer, Integer, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}

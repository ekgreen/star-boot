<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.maven.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.5.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>io.github.ekgreen</groupId>
    <artifactId>star-boot</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <packaging>pom</packaging>

    <name>${project.groupId}:${project.artifactId}</name>
    <description>Набор библиотек для работы с проектами</description>
    <url>http://github.com/ekgreen/star-boot</url>

    <licenses>
        <license>
            <name>The Apache License, Version 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>old-dog</id>
            <name>Roman Izmalkov</name>
            <email>rgizmalkov.dev@gmail.com</email>
            <organization>S1ar Dog</organization>
            <organizationUrl>https://github.com/ekgreen</organizationUrl>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:git://github.com/ekgreen/star-boot.git</connection>
        <developerConnection>scm:git:ssh://github.com:ekgreen/star-boot.git</developerConnection>
        <url>https://github.com/ekgreen/star-boot/tree/main</url>
    </scm>

    <modules>
        <module>star-boot-code-smell</module>
        <module>star-boot-dependencies</module>
        <module>star-boot-parent</module>
        <module>star-boot-model-and-interfaces</module>
        <module>star-boot-reflection</module>
        <module>star-boot-serialization</module>
        <module>star-boot-toolbox</module>
        <module>star-boot-spring</module>
        <module>star-boot-identifier</module>
        <module>star-boot-http-client</module>
        <module>star-boot-cache</module>
        <module>star-boot-data-access</module>
        <module>star-boot-dictionaries</module>
    </modules>

    <profiles>
        <!-- Профиль для развертывания в собственный Nexus OSS -->
        <profile>
            <id>nexus-deploy</id>

            <properties>
                <skip.deploy>false</skip.deploy>
                <skip.gpg>false</skip.gpg>
                <skip.nexus.staging>true</skip.nexus.staging>
            </properties>

            <!-- Переопределяем distributionManagement для Nexus -->
            <distributionManagement>
                <repository>
                    <id>nexus-releases</id>
                    <name>Nexus Release Repository</name>
                    <url>http://cloud.deep.space:20001/nexus/repository/maven-releases/</url>
                </repository>
                <snapshotRepository>
                    <id>nexus-snapshots</id>
                    <name>Nexus Snapshot Repository</name>
                    <url>http://cloud.deep.space:20001/nexus/repository/maven-snapshots/</url>
                </snapshotRepository>
            </distributionManagement>

            <build>
                <plugins>
                    <!-- Deploy Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                    </plugin>

                    <!-- Source JAR -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>

                    <!-- Javadoc JAR -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>

                    <!-- GPG Signing для Maven Central -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <!-- Профиль для релиза в Maven Central -->
        <profile>
            <id>central-release</id>

            <properties>
                <skip.deploy>false</skip.deploy>
                <skip.gpg>false</skip.gpg>
                <skip.nexus.staging>false</skip.nexus.staging>
            </properties>

            <!-- Переопределяем distributionManagement для Maven Central -->
            <distributionManagement>
                <repository>
                    <id>ossrh</id>
                    <name>Central Repository OSSRH</name>
                    <url>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/</url>
                </repository>
                <snapshotRepository>
                    <id>ossrh</id>
                    <name>Central Repository OSSRH Snapshots</name>
                    <url>https://s01.oss.sonatype.org/content/repositories/snapshots</url>
                </snapshotRepository>
            </distributionManagement>

            <build>
                <plugins>
                    <!-- Deploy Plugin -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-deploy-plugin</artifactId>
                    </plugin>

                    <!-- Source JAR -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                    </plugin>

                    <!-- Javadoc JAR -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                    </plugin>

                    <!-- GPG Signing для Maven Central -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-gpg-plugin</artifactId>
                    </plugin>

                    <!-- Nexus Staging для Maven Central -->
                    <plugin>
                        <groupId>org.sonatype.plugins</groupId>
                        <artifactId>nexus-staging-maven-plugin</artifactId>
                    </plugin>
                </plugins>
            </build>
        </profile>

    </profiles>


    <properties>
        <!-- Build -->
        <java.version>24</java.version>
        <maven.compiler.source>24</maven.compiler.source>
        <maven.compiler.target>24</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven-compiler-plugin.version>3.13.0</maven-compiler-plugin.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <maven-site-plugin.version>3.12.1</maven-site-plugin.version>
        <build-helper-maven-plugin.version>3.6.0</build-helper-maven-plugin.version>
        <checkstyle.version>11.0.0</checkstyle.version>
        <checkstyle-plugin.version>3.3.1</checkstyle-plugin.version>
        <jacoco-maven-plugin.version>0.8.13</jacoco-maven-plugin.version>
        <allure-maven-plugin.version>2.14.0</allure-maven-plugin.version>
        <nexus-staging-maven-plugin.version>0.8.0</nexus-staging-maven-plugin.version>
        <maven-gpg-plugin.version>3.2.8</maven-gpg-plugin.version>

        <!-- Tools -->
        <jakarta.validation.version>3.1.1</jakarta.validation.version>

        <!-- Plugins Management -->
        <skip.on.project.root>false</skip.on.project.root>

        <testcontainers-jooq-codegen.version>0.0.4</testcontainers-jooq-codegen.version>
        <liquibase.version>4.29.2</liquibase.version>

        <project.generated.sources>target/generated-sources</project.generated.sources>
        <project.generated.package>com.github.old.dog.generated</project.generated.package>

        <spring.boot.plugin.classifier>boot</spring.boot.plugin.classifier>

        <skip.liquibase>false</skip.liquibase>
        <liquibase.changelog.file>postgres-db-changelog.xml</liquibase.changelog.file>
        <liquibase.changelog.directory>db/postgresql</liquibase.changelog.directory>
        <liquibase.changelog.path>${liquibase.changelog.directory}/${liquibase.changelog.file}
        </liquibase.changelog.path>

        <skip.jooq>false</skip.jooq>
        <jooq.target.package.name>${project.generated.package}.jooq</jooq.target.package.name>
        <jooq.target.directory>${project.generated.sources}/jooq</jooq.target.directory>
        <jooq.database.includes>.*</jooq.database.includes>
        <jooq.generate.pojos>true</jooq.generate.pojos>
        <jooq.generate.validation.annotations>true</jooq.generate.validation.annotations>
        <jooq.generate.daos>true</jooq.generate.daos>
        <jooq.generate.spring.annotations>true</jooq.generate.spring.annotations>
        <jooq.generate.spring.dao>true</jooq.generate.spring.dao>

        <skip.resources>false</skip.resources>
        <resource.plugin.encoding>${project.build.sourceEncoding}</resource.plugin.encoding>
        <resource.plugin.output.directory>${project.build.outputDirectory}/sql</resource.plugin.output.directory>

        <skip.checkstyle>false</skip.checkstyle>
        <checkstyle.config.location>checkstyle.xml</checkstyle.config.location>
        <checkstyle.suppressions.location>checkstyle-suppressions.xml</checkstyle.suppressions.location>

        <skip.unit.tests>false</skip.unit.tests>
        <jacoco.line.coverage.minimum>0.80</jacoco.line.coverage.minimum>
        <jacoco.branch.coverage.minimum>0.75</jacoco.branch.coverage.minimum>
        <jacoco.halt.on.failure>false</jacoco.halt.on.failure>

        <skip.enforcer>false</skip.enforcer>
        <enforcer.fail.build.on.rule>false</enforcer.fail.build.on.rule>
        <enforcer.fast.fail>false</enforcer.fast.fail>

        <skip.deploy>false</skip.deploy>
        <sonatype.publishing.server.id>ossrh</sonatype.publishing.server.id>
        <gpg.key.id>${env.GPG_KEY_ID}</gpg.key.id>
        <gpg.passphrase>${env.GPG_PASSPHRASE}</gpg.passphrase>

        <!-- Spring Boot (управляется через spring-boot-dependencies) -->
        <spring-boot.version>3.5.4</spring-boot.version>

        <!-- Переменные которые требуется вынести на уровень над parent и dependencies -->
        <allure.version>2.24.0</allure.version>
        <aspectj.version>1.9.24</aspectj.version>
    </properties>

    <build>
        <!-- Управление плагинами - НЕ влияет на сборку, только предоставляет конфигурацию -->
        <pluginManagement>
            <plugins>
                <!-- Maven Compile Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>

                <!-- Spring Boot Plugin -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <configuration>
                        <classifier>${spring.boot.plugin.classifier}</classifier>
                        <excludes>
                            <exclude>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                            </exclude>
                        </excludes>
                    </configuration>
                </plugin>

                <!-- Liquibase Plugin Configuration -->
                <plugin>
                    <groupId>org.liquibase</groupId>
                    <artifactId>liquibase-maven-plugin</artifactId>
                    <version>${liquibase.version}</version>
                    <configuration>
                        <skip>${skip.liquibase}</skip>
                        <changeLogFile>${liquibase.changelog.file}</changeLogFile>
                        <url>${database.url}</url>
                        <username>${database.username}</username>
                        <password>${database.password}</password>
                        <verbose>true</verbose>
                        <logging>debug</logging>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${postgresql.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- Jooq Plugin Configuration -->
                <plugin>
                    <groupId>org.testcontainers</groupId>
                    <artifactId>testcontainers-jooq-codegen-maven-plugin</artifactId>
                    <version>${testcontainers-jooq-codegen.version}</version>
                    <configuration>
                        <skip>${skip.jooq}</skip>
                        <!-- Настройка контейнера -->
                        <database>
                            <type>POSTGRES</type>
                            <containerImage>postgres:16-alpine</containerImage>
                            <databaseName>jooq_codegen</databaseName>
                            <username>postgres</username>
                            <password>password</password>
                        </database>

                        <!-- Запуск Liquibase миграций -->
                        <liquibase>
                            <changeLogPath>${liquibase.changelog.file}</changeLogPath>
                            <changeLogDirectory>${liquibase.changelog.directory}</changeLogDirectory>
                        </liquibase>

                        <!-- Конфигурация генерации JOOQ -->
                        <jooq>
                            <generator>
                                <database>
                                    <includes>${jooq.database.includes}</includes>
                                    <inputSchema>${jooq.database.schema}</inputSchema>
                                </database>

                                <target>
                                    <packageName>${jooq.target.package.name}</packageName>
                                    <directory>${jooq.target.directory}</directory>
                                </target>

                                <generate>
                                    <pojos>${jooq.generate.pojos}</pojos>
                                    <validationAnnotations>${jooq.generate.validation.annotations}
                                    </validationAnnotations>
                                    <daos>${jooq.generate.daos}</daos>
                                    <springAnnotations>${jooq.generate.spring.annotations}</springAnnotations>
                                    <springDao>${jooq.generate.spring.dao}</springDao>
                                </generate>

                                <strategy>
                                    <matchers>
                                        <tables>
                                            <table>
                                                <pojoClass>
                                                    <transform>PASCAL</transform>
                                                    <expression>$0_POJO</expression>
                                                </pojoClass>
                                                <tableClass>
                                                    <transform>PASCAL</transform>
                                                    <expression>$0_TABLE</expression>
                                                </tableClass>
                                                <daoClass>
                                                    <transform>PASCAL</transform>
                                                    <expression>CRUD_$0_REPOSITORY</expression>
                                                </daoClass>
                                            </table>
                                        </tables>
                                    </matchers>
                                </strategy>
                            </generator>
                        </jooq>
                    </configuration>

                    <dependencies>
                        <dependency>
                            <groupId>org.testcontainers</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${testcontainers.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.postgresql</groupId>
                            <artifactId>postgresql</artifactId>
                            <version>${postgresql.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.liquibase</groupId>
                            <artifactId>liquibase-core</artifactId>
                            <version>${liquibase.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>org.jooq</groupId>
                            <artifactId>jooq-codegen</artifactId>
                            <version>${jooq.version}</version>
                        </dependency>
                    </dependencies>

                    <executions>
                        <execution>
                            <id>generate-jooq-sources</id>
                            <goals>
                                <goal>generate</goal>
                            </goals>
                            <phase>generate-sources</phase>
                        </execution>
                    </executions>
                </plugin>

                <!-- Настройка различных источников кодогенерации -->
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>build-helper-maven-plugin</artifactId>
                    <version>${build-helper-maven-plugin.version}</version>
                    <executions>
                        <!-- Jooq -->
                        <execution>
                            <id>add-jooq-sources</id>
                            <phase>generate-sources</phase>
                            <goals>
                                <goal>add-source</goal>
                            </goals>
                            <configuration>
                                <skipAddSource>${skip.jooq}</skipAddSource>
                                <sources>
                                    <source>${jooq.target.directory}</source>
                                </sources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- Resource Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                    <configuration>
                        <skip>${skip.resources}</skip>
                    </configuration>
                    <executions>
                        <execution>
                            <id>append-liquibase</id>
                            <phase>process-resources</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <skip>${skip.liquibase}</skip>
                                <encoding>${resource.plugin.encoding}</encoding>
                                <outputDirectory>${resource.plugin.output.directory}</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>db</directory>
                                        <targetPath>db</targetPath>
                                        <includes>
                                            <include>**</include>
                                        </includes>
                                        <filtering>true</filtering>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- Reporting Plugin -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven-site-plugin.version}</version>
                </plugin>

                <!-- Checkstyle статический анализ -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-checkstyle-plugin</artifactId>
                    <version>${checkstyle-plugin.version}</version>
                    <configuration>
                        <skip>${skip.checkstyle}</skip>
                        <configLocation>${checkstyle.config.location}</configLocation>
                        <suppressionsLocation>${checkstyle.suppressions.location}</suppressionsLocation>
                        <consoleOutput>true</consoleOutput>
                        <failsOnError>true</failsOnError>
                        <failOnViolation>true</failOnViolation>
                        <violationSeverity>warning</violationSeverity>
                        <linkXRef>false</linkXRef>

                        <!-- Исключения -->
                        <excludes>
                            **/generated-sources/**/*,
                            **/target/**/*,
                            **/*Test.java,
                            **/*IT.java
                        </excludes>

                        <!-- Включения -->
                        <includes>
                            **/*.java
                        </includes>
                    </configuration>

                    <dependencies>
                        <dependency>
                            <groupId>com.puppycrawl.tools</groupId>
                            <artifactId>checkstyle</artifactId>
                            <version>${checkstyle.version}</version>
                        </dependency>
                        <dependency>
                            <groupId>io.github.ekgreen</groupId>
                            <artifactId>code-smell-checkstyle</artifactId>
                            <version>${project.version}</version>
                        </dependency>
                    </dependencies>

                    <executions>
                        <execution>
                            <id>checkstyle-validate</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>checkstyle-report</id>
                            <phase>site</phase>
                            <goals>
                                <goal>checkstyle</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- ============================================== -->
                <!-- Test & Reports -->
                <!-- ============================================== -->

                <!-- 1. Surefire - Запуск тестов -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skip>${skip.unit.tests}</skip>

                        <argLine>
                            -Dfile.encoding=UTF-8
                            -Duser.timezone=UTC
                            -Duser.language=en
                            -Duser.country=US
                            -Xms512m
                            -Xmx2048m
                            -XX:MaxMetaspaceSize=512m
                            -javaagent:"${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar"
                            ${argLine}
                        </argLine>

                        <systemPropertyVariables>
                            <!-- Allure результаты -->
                            <allure.results.directory>${project.build.directory}/allure-results
                            </allure.results.directory>
                            <!-- Spring Boot тестовые профили -->
                            <spring.profiles.active>test</spring.profiles.active>
                        </systemPropertyVariables>

                        <forkCount>1</forkCount>
                        <reuseForks>true</reuseForks>
                        <parallel>methods</parallel>
                        <threadCount>4</threadCount>

                        <reportFormat>brief</reportFormat>
                        <printSummary>true</printSummary>

                        <includes>
                            <include>**/*Test.java</include>
                            <include>**/*Tests.java</include>
                            <include>**/*IT.java</include>
                        </includes>
                    </configuration>
                    <dependencies>
                        <dependency>
                            <groupId>org.aspectj</groupId>
                            <artifactId>aspectjweaver</artifactId>
                            <version>${aspectj.version}</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- 2. JaCoCo - Анализ покрытия кода -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco-maven-plugin.version}</version>
                    <configuration>
                        <skip>${skip.unit.tests}</skip>

                        <excludes>
                            <!-- Lombok сгенерированный код -->
                            <exclude>**/*$*</exclude>
                            <!-- Spring Boot конфигурация -->
                            <exclude>**/config/**</exclude>
                            <!-- DTO классы -->
                            <exclude>**/dto/**</exclude>
                            <!-- Entity классы -->
                            <exclude>**/entity/**</exclude>
                            <!-- Spring Boot Application класс -->
                            <exclude>**/*Application.*</exclude>
                            <!-- Auto-configuration классы -->
                            <exclude>**/autoconfigure/**</exclude>
                        </excludes>

                    </configuration>
                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>report</id>
                            <phase>test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>check</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>check</goal>
                            </goals>
                            <configuration>
                                <haltOnFailure>${jacoco.halt.on.failure}</haltOnFailure>
                                <rules>
                                    <rule>
                                        <element>BUNDLE</element>
                                        <limits>
                                            <limit>
                                                <counter>LINE</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${jacoco.line.coverage.minimum}</minimum>
                                            </limit>
                                            <limit>
                                                <counter>BRANCH</counter>
                                                <value>COVEREDRATIO</value>
                                                <minimum>${jacoco.branch.coverage.minimum}</minimum>
                                            </limit>
                                        </limits>
                                    </rule>
                                </rules>
                            </configuration>
                        </execution>
                        <execution>
                            <id>merge-reports</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>merge</goal>
                            </goals>
                            <configuration>
                                <skip>${skip.on.project.root}</skip>
                                <fileSets>
                                    <fileSet>
                                        <directory>${project.build.directory}/../</directory>
                                        <includes>
                                            <include>**/target/jacoco.exec</include>
                                            <include>**/target/jacoco-it.exec</include>
                                        </includes>
                                    </fileSet>
                                </fileSets>
                                <destFile>${project.build.directory}/jacoco-merged.exec</destFile>
                            </configuration>
                        </execution>
                        <execution>
                            <id>report-aggregate</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>report-aggregate</goal>
                            </goals>
                            <configuration>
                                <skip>${skip.on.project.root}</skip>
                                <dataFileIncludes>
                                    <dataFileInclude>**/target/jacoco.exec</dataFileInclude>
                                    <dataFileInclude>**/target/jacoco-it.exec</dataFileInclude>
                                    <dataFileInclude>**/target/jacoco-merged.exec</dataFileInclude>
                                </dataFileIncludes>
                                <outputDirectory>${project.build.directory}/site/jacoco-aggregate</outputDirectory>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!-- 3. Allure - Генерация отчетов -->
                <plugin>
                    <groupId>io.qameta.allure</groupId>
                    <artifactId>allure-maven</artifactId>
                    <version>${allure-maven-plugin.version}</version>
                    <configuration>
                        <reportVersion>${allure.version}</reportVersion>
                        <resultsDirectory>${project.build.directory}/allure-results</resultsDirectory>
                        <reportDirectory>${project.build.directory}/allure-report</reportDirectory>
                    </configuration>
                    <executions>
                        <execution>
                            <id>allure-all-tests</id>
                            <phase>post-integration-test</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <configuration>
                                <reportDirectory>${project.build.directory}/allure-report-full</reportDirectory>
                            </configuration>
                        </execution>

                    </executions>
                </plugin>

                <!-- ========================================================================== -->
                <!-- Дополнительные плагины обеспечивающие надежность и стабильность сборок -->
                <!-- ========================================================================== -->

                <!-- Maven Enforcer Plugin - Контроль требований к окружению -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven-enforcer-plugin.version}</version>
                    <configuration>
                        <!-- Общие настройки -->
                        <skip>${skip.enforcer}</skip>
                        <fail>${enforcer.fail.build.on.rule}</fail>
                        <failFast>${enforcer.fast.fail}</failFast>

                        <rules>
                            <!-- 1. КОНТРОЛЬ ВЕРСИЙ ИНСТРУМЕНТОВ -->
                            <requireMavenVersion>
                                <version>[3.12.0,)</version>
                                <message>🚫 Maven 3.12.0+ обязателен для корректной работы с Java 24 и современными
                                    зависимостями
                                </message>
                            </requireMavenVersion>

                            <requireJavaVersion>
                                <version>[${java.version},)</version>
                                <message>🚫 Проект требует Java ${java.version}+ для поддержки современных языковых
                                    возможностей
                                </message>
                                <dependency>
                                    <groupId>io.github.ekgreen</groupId>
                                    <artifactId>star-boot-dependencies</artifactId>
                                    <version>0.0.1-20250821.100956-1</version>
                                    <type>pom</type>
                                </dependency>                            </requireJavaVersion>

                            <!-- 2. БЕЗОПАСНОСТЬ ЗАВИСИМОСТЕЙ -->
                            <bannedDependencies>
                                <excludes>
                                    <!-- Устаревшие логгеры (уязвимости) -->
                                    <exclude>commons-logging:commons-logging</exclude>
                                    <exclude>log4j:log4j</exclude>
                                    <exclude>org.apache.logging.log4j:log4j-core:(,2.17.1)</exclude>

                                    <!-- Устаревшие библиотеки -->
                                    <exclude>commons-collections:commons-collections:(,3.2.2]</exclude>
                                    <exclude>org.apache.commons:commons-collections4:(,4.4]</exclude>

                                    <!-- Конфликтующие реализации -->
                                    <exclude>javax.servlet:servlet-api</exclude>
                                    <exclude>javax.transaction:transaction-api</exclude>

                                    <!-- Старые Jakarta EE артефакты -->
                                    <exclude>javax.validation:validation-api</exclude>
                                    <exclude>javax.persistence:javax.persistence-api</exclude>
                                </excludes>
                                <message>🚫 Обнаружены запрещенные или устаревшие зависимости с известными уязвимостями
                                </message>
                            </bannedDependencies>

                            <!-- 3. КОНТРОЛЬ РЕЛИЗНЫХ ЗАВИСИМОСТЕЙ -->
                            <requireReleaseDeps>
                                <onlyWhenRelease>true</onlyWhenRelease>
                                <message>🚫 В релизной сборке запрещены SNAPSHOT зависимости</message>
                            </requireReleaseDeps>

                            <!-- 4. КОНТРОЛЬ ДУБЛИКАТОВ КЛАССОВ -->
                            <banDuplicateClasses>
                                <ignoreClasses>
                                    <!-- Spring Boot автоконфигурация -->
                                    <ignoreClass>org.springframework.boot.autoconfigure.*</ignoreClass>
                                    <!-- Тестовые утилиты -->
                                    <ignoreClass>org.junit.*</ignoreClass>
                                    <ignoreClass>org.hamcrest.*</ignoreClass>
                                </ignoreClasses>
                                <findAllDuplicates>true</findAllDuplicates>
                                <message>🚫 Обнаружены дублирующиеся классы, что может привести к непредсказуемому
                                    поведению
                                </message>
                            </banDuplicateClasses>

                            <!-- 5. КОНТРОЛЬ ВЕРСИЙ ЗАВИСИМОСТЕЙ -->
                            <dependencyConvergence>
                                <message>🚫 Конфликт версий транзитивных зависимостей. Используйте dependencyManagement
                                    для разрешения
                                </message>
                            </dependencyConvergence>

                            <!-- 6. КОНТРОЛЬ РАЗМЕРА ПРОЕКТА -->
                            <requireFilesDontExist>
                                <files>
                                    <file>${project.basedir}/target/classes/.git</file>
                                    <file>${project.basedir}/src/main/resources/.DS_Store</file>
                                    <file>${project.basedir}/src/test/resources/.DS_Store</file>
                                </files>
                                <message>🚫 Обнаружены нежелательные системные файлы в проекте</message>
                            </requireFilesDontExist>

                            <!-- 7. КОНТРОЛЬ СВОЙСТВ -->
                            <requireProperty>
                                <property>project.build.sourceEncoding</property>
                                <regex>UTF-8</regex>
                                <message>🚫 Кодировка проекта должна быть UTF-8</message>
                            </requireProperty>

                            <!-- 8. КОНТРОЛЬ ПРОФИЛЕЙ -->
                            <requireActiveProfile>
                                <profiles>dev, test, stage, prod-track,prod-like-track,fast-track</profiles>
                                <all>false</all>
                                <message>🚫 Должен быть активен один из профилей: dev, test, stage, prod-track,
                                    prod-like-track, fast-track
                                </message>
                            </requireActiveProfile>

                        </rules>
                    </configuration>

                    <executions>
                        <!-- Проверка на этапе валидации -->
                        <execution>
                            <id>enforce-versions-and-dependencies</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <phase>validate</phase>
                        </execution>

                        <!-- Дополнительная проверка перед тестами -->
                        <execution>
                            <id>enforce-before-tests</id>
                            <goals>
                                <goal>enforce</goal>
                            </goals>
                            <phase>test-compile</phase>
                            <configuration>
                                <rules>
                                    <bannedDependencies>
                                        <excludes>
                                            <exclude>*:*:*:jar:compile:*SNAPSHOT*</exclude>
                                        </excludes>
                                        <message>🚫 SNAPSHOT зависимости в compile scope запрещены в продакшн сборке
                                        </message>
                                    </bannedDependencies>
                                </rules>
                            </configuration>
                        </execution>
                    </executions>

                    <dependencies>
                        <!-- Дополнительные правила от Mojo -->
                        <dependency>
                            <groupId>org.codehaus.mojo</groupId>
                            <artifactId>extra-enforcer-rules</artifactId>
                            <version>1.8.0</version>
                        </dependency>
                    </dependencies>
                </plugin>

                <!-- ============================================== -->
                <!-- Release & Deploy -->
                <!-- ============================================== -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>

                <!--
                    Назначение: Основной плагин для загрузки артефактов в удаленный репозиторий
                    За что отвечает:
                        - Автоматически генерирует `.md5` и `.sha1` checksums для всех файлов
                        - Создает Maven metadata файлы (`maven-metadata.xml`)
                        - `deployAtEnd=true` - откладывает деплой до конца сборки всех модулей (для multi-module проектов)
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven-deploy-plugin.version}</version>
                    <configuration>
                        <skip>${skip.deploy}</skip>
                        <deployAtEnd>true</deployAtEnd>
                    </configuration>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>attach-sources</id>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                    <configuration>
                        <skip>${skip.deploy}</skip>
                        <source>${java.version}</source>
                        <doclint>none</doclint>
                        <failOnError>false</failOnError>
                        <quiet>true</quiet>
                        <additionalJOptions>
                            <additionalJOption>-J--add-exports=jdk.javadoc/jdk.javadoc.internal.tool=ALL-UNNAMED
                            </additionalJOption>
                        </additionalJOptions>
                    </configuration>
                    <executions>
                        <execution>
                            <id>attach-javadocs</id>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    GPG Signing
                    Назначение: Криптографическая подпись всех артефактов
                -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-gpg-plugin</artifactId>
                    <version>${maven-gpg-plugin.version}</version>
                    <configuration>
                        <skip>${skip.deploy}</skip>
                        <keyname>${gpg.key.id}</keyname>
                        <passphrase>${gpg.passphrase}</passphrase>
                    </configuration>
                    <executions>
                        <execution>
                            <id>sign-artifacts</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>sign</goal>
                            </goals>
                            <configuration>
                                <gpgArguments>
                                    <arg>--pinentry-mode</arg>
                                    <arg>loopback</arg>
                                </gpgArguments>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <!--
                    Nexus Staging
                    Назначение: Управление процессом публикации в Maven Central через Nexus
                -->
                <plugin>
                    <groupId>org.sonatype.plugins</groupId>
                    <artifactId>nexus-staging-maven-plugin</artifactId>
                    <version>${nexus-staging-maven-plugin.version}</version>
                    <extensions>true</extensions>
                    <configuration>
                        <skip>${skip.deploy}</skip>
                        <publishingServerId>${sonatype.publishing.server.id}</publishingServerId>
                    </configuration>
                </plugin>

                <!-- JReleaser Maven Plugin -->
                <plugin>
                    <groupId>org.jreleaser</groupId>
                    <artifactId>jreleaser-maven-plugin</artifactId>
                    <version>${jreleaser-maven-plugin.version}</version>
                    <configuration>
                        <skip>${skip.deploy}</skip>
                        <!-- Основная конфигурация в jreleaser.yml -->
                        <configFile>${project.basedir}/jreleaser.yml</configFile>

                        <!-- Можно также встроить конфигурацию прямо в POM -->
                        <jreleaser>
                            <!-- Встроенная конфигурация (альтернатива YAML) -->
                        </jreleaser>
                    </configuration>

                    <!-- Выполнение в определенных фазах -->
                    <executions>
                        <execution>
                            <id>prepare-release</id>
                            <phase>install</phase>
                            <goals>
                                <goal>prepare</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>

            </plugins>

        </pluginManagement>

        <plugins>
            <!-- JaCoCo агрегация на уровне корневого проекта -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
            </plugin>
        </plugins>

    </build>



</project>

package com.github.old.dog.star.boot.toolbox.strings.transliterate;

import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

/**
 * Интерфейс для транслитерации символов и строк между различными языками.
 * <p>
 * Транслитерация - это процесс преобразования текста, написанного с использованием одного алфавита,
 * в соответствующий текст в другом алфавите. Этот интерфейс определяет базовые методы,
 * необходимые для выполнения таких преобразований.
 * <p>
 * Реализации этого интерфейса могут использовать различные стратегии транслитерации,
 * включая ассоциативные карты ({@link AssociationTransliterator}) или идентичные преобразования
 * ({@link IdentityTransliterator}).
 * <p>
 * Интерфейс также предоставляет доступ к коллекции часто используемых транслитераторов через
 * константу {@link #COMMON}.
 */
public interface Transliterator {

    /**
     * Получает транслитерацию для указанной строки.
     * <p>
     * Этот метод должен корректно обрабатывать как односимвольные, так и многосимвольные
     * входные данные. Реализации могут поддерживать особые правила для многосимвольных
     * последовательностей, которые должны транслитерироваться как единое целое.
     *
     * @param ch строка для транслитерации
     * @return транслитерированная строка или null, если нет соответствия
     */
    @Nullable
    String get(String ch);

    /**
     * Получает транслитерацию для указанного символа.
     * <p>
     * Этот метод обрабатывает отдельные символы. Обратите внимание, что для некоторых
     * языков один символ может транслитерироваться в несколько символов на целевом языке
     * (например, русская буква "щ" может транслитерироваться как "sch" в английском).
     *
     * @param ch символ для транслитерации
     * @return транслитерированная строка или null, если нет соответствия
     */
    @Nullable
    String get(char ch);

    /**
     * Проверяет, принадлежит ли символ к исходному языковому блоку.
     * <p>
     * Этот метод используется для определения, является ли символ частью исходного
     * алфавита, для которого настроен транслитератор. Например, для транслитератора
     * с русского на английский, метод вернет true для кириллических символов.
     *
     * @param letter символ для проверки
     * @return true, если символ принадлежит исходному блоку юникода
     */
    boolean inOriginalBlock(char letter);

    /**
     * Проверяет, принадлежит ли символ к целевому языковому блоку.
     * <p>
     * Этот метод используется для определения, является ли символ частью целевого
     * алфавита, на который настроен транслитератор. Например, для транслитератора
     * с русского на английский, метод вернет true для латинских символов.
     *
     * @param letter символ для проверки
     * @return true, если символ принадлежит целевому блоку юникода
     */
    boolean inExpectedBlock(char letter);

    /**
     * Возвращает код исходного языка.
     * <p>
     * Этот метод возвращает строковое представление кода исходного языка
     * (например, "ru" для русского языка). Код соответствует стандарту ISO 639.
     *
     * @return строковое представление кода исходного языка
     */
    @NotNull
    String getOriginalLanguage();

    /**
     * Возвращает код целевого языка.
     * <p>
     * Этот метод возвращает строковое представление кода целевого языка
     * (например, "en" для английского языка). Код соответствует стандарту ISO 639.
     *
     * @return строковое представление кода целевого языка
     */
    @NotNull
    String getExpectedLanguage();

    /**
     * Карта предварительно настроенных транслитераторов для часто используемых языковых пар.
     * <p>
     * Ключи в этой карте имеют формат "SOURCE_TARGET", где SOURCE - код исходного языка,
     * а TARGET - код целевого языка (например, "EN_RU" для транслитерации с английского на русский).
     * <p>
     * В настоящее время поддерживаются следующие транслитераторы:
     * <ul>
     *   <li>"EN_RU" - с русского на английский</li>
     * </ul>
     * <p>
     * Эта коллекция упрощает доступ к часто используемым транслитераторам без необходимости
     * создавать и настраивать их вручную.
     */
    public static final Map<String, AssociationTransliterator> COMMON = Map.of(
        "EN_RU", AssociationTransliterator.EN_RU
    );
}
